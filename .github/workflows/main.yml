name: JavaScript Producer

on:
  push:
    paths:
      - '**.user.js'
      - '.github/workflows/**'
  pull_request:
    paths:
      - '**.user.js'
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  TERSER_OPTIONS: '--compress drop_console=true,pure_funcs=[console.log] --mangle --comments false'
  USERJS_DIR: 'userjs'
  TZ: 'Asia/Ho_Chi_Minh'

jobs:
  process-js:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          npm install -g terser

      - name: Set current date
        id: date
        run: |
          echo "CURRENT_DATE=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

      - name: Initialize workspace
        id: init
        run: |
          mkdir -p "${{ env.USERJS_DIR }}"
          touch "${{ env.USERJS_DIR }}/.gitkeep"
          echo "# Checksums generated on ${{ env.CURRENT_DATE }}" > "${{ env.USERJS_DIR }}/checksums.txt"
          echo "initial_count=$(find . -name "*.user.js" -not -path "./${{ env.USERJS_DIR }}/*" | wc -l)" >> $GITHUB_OUTPUT

      - name: Process JavaScript files
        id: process
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          calculate_checksums() {
            local file="$1"
            local base="$2"
            local target_dir="$3"
            
            {
              echo "SHA-256: $(sha256sum "$file" | cut -d' ' -f1)"
              echo "MD5: $(md5sum "$file" | cut -d' ' -f1)"
              echo "SHA-1: $(sha1sum "$file" | cut -d' ' -f1)"
            } >> "$target_dir/checksums.txt"
            echo "File: ${base}.user.js" >> "$target_dir/checksums.txt"
            echo "---" >> "$target_dir/checksums.txt"
          }

          # Function to handle file deletions
          handle_file_deletion() {
            local deleted_file="$1"
            local target_dir="$2"
            
            # If a .user.js file is deleted
            if [[ "$deleted_file" =~ \.user\.js$ ]]; then
              local base="${deleted_file%.user.js}"
              # Remove corresponding .meta.js file if it exists
              if [ -f "$target_dir/${base}.meta.js" ]; then
                rm -f "$target_dir/${base}.meta.js"
                echo "‚úì Removed related meta file: ${base}.meta.js"
              fi
            # If a .meta.js file is deleted
            elif [[ "$deleted_file" =~ \.meta\.js$ ]]; then
              local base="${deleted_file%.meta.js}"
              # Remove corresponding .user.js file if it exists
              if [ -f "$target_dir/${base}.user.js" ]; then
                rm -f "$target_dir/${base}.user.js"
                echo "‚úì Removed related user script: ${base}.user.js"
              fi
            fi
          }
          
          process_script() {
            local file="$1"
            local filename=$(basename "$file")
            local base="${filename%.user.js}"
            local target_dir="${{ env.USERJS_DIR }}"
            
            echo "Processing $filename..."
            
            # Extract and validate metadata
            meta_block=$(awk '/\/\/ ==UserScript==/{p=1;print;next}/\/\/ ==\/UserScript==/{p=0;print;exit}p{print}' "$file")
            
            get_meta_value() {
              local pattern="$1"
              local meta="$2"
              local langs=("vi" "en" "")
              
              for lang in "${langs[@]}"; do
                local suffix=""
                [ -n "$lang" ] && suffix=":$lang"
                local value=$(echo "$meta" | grep -m 1 "@${pattern}${suffix}" | sed -E "s/\/\/ @${pattern}${suffix}\s+//")
                [ -n "$value" ] && echo "$value" && return
              done
            }

            # Get metadata values
            local name=$(get_meta_value "name" "$meta_block")
            local description=$(get_meta_value "description" "$meta_block")
            local version=$(echo "$meta_block" | grep -m 1 "@version" | sed -E 's/\/\/ @version\s+//')
            local author=$(echo "$meta_block" | grep -m 1 "@author" | sed -E 's/\/\/ @author\s+//')
            
            # Validate required metadata
            if [ -z "$name" ] || [ -z "$description" ] || [ -z "$version" ] || [ -z "$author" ]; then
              echo "::error::Missing required metadata in $filename"
              return 1
            fi
            
            # Update metadata URLs
            meta_block=$(echo "$meta_block" | sed -E "
              s|^// @downloadURL .*|// @downloadURL https://github.com/$GITHUB_REPOSITORY/raw/main/$target_dir/${base}.user.js|
              s|^// @updateURL .*|// @updateURL https://github.com/$GITHUB_REPOSITORY/raw/main/$target_dir/${base}.meta.js|
              s|^// @supportURL .*|// @supportURL https://github.com/$GITHUB_REPOSITORY/issues|
              /^\/\/ ==\/UserScript==/  }}
            ")
            
            # Process and minify code
            {
              echo "$meta_block"
              awk '/\/\/ ==\/UserScript==/{p=1;next}p{print}' "$file" | terser ${{ env.TERSER_OPTIONS }}
            } > "$target_dir/${base}.user.js"
            
            # Save metadata
            echo "$meta_block" > "$target_dir/${base}.meta.js"
            
            # Calculate and save multiple checksums
            calculate_checksums "$target_dir/${base}.user.js" "$base" "$target_dir"
            
            # Remove original file
            rm -f "$file"
            
            echo "‚úì Processed and removed: $filename"
            return 0
          }
          
          export -f process_script
          export -f calculate_checksums
          export -f handle_file_deletion
          
          # Process all .user.js files not in userjs directory
          find . -name "*.user.js" -not -path "./${{ env.USERJS_DIR }}/*" -print0 | 
          while IFS= read -r -d '' file; do
            if ! process_script "$file"; then
              exit 1
            fi
          done

          # Handle deleted files by comparing with previous commit
          deleted_files=$(git diff --name-only --diff-filter=D HEAD^ HEAD)
          if [ -n "$deleted_files" ]; then
            echo "Processing deleted files..."
            while IFS= read -r file; do
              if [[ "$file" =~ \.user\.js$|\.meta\.js$ ]] && [[ "$file" =~ ^${{ env.USERJS_DIR }}/ ]]; then
                handle_file_deletion "$(basename "$file")" "${{ env.USERJS_DIR }}"
              fi
            done <<< "$deleted_files"
          fi
          
          echo "processed_count=$(find "${{ env.USERJS_DIR }}" -name "*.user.js" | wc -l)" >> $GITHUB_OUTPUT

      - name: Update README
        if: steps.process.outputs.processed_count > 0
        run: |
          # Create README content
          cat > README.md << EOL
          <div align="center">
          
          # üì¶ B·ªô S∆∞u T·∫≠p UserScript
          
          ![Scripts](https://img.shields.io/badge/scripts-${{ steps.process.outputs.processed_count }}-blue?style=flat-square)
          ![C·∫≠p nh·∫≠t](https://img.shields.io/github/last-commit/${{ github.repository }}/main?style=flat-square&label=C·∫≠p%20nh·∫≠t)
          ![Tr·∫°ng th√°i](https://img.shields.io/github/actions/workflow/status/${{ github.repository }}/js-producer.yml?style=flat-square&label=Tr·∫°ng%20th√°i)
          
          *B·ªô s∆∞u t·∫≠p UserScript ƒë√£ ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a*
          
          </div>
          
          ## üìú Danh S√°ch Script
          
          <table>
          <tr>
          <th>Script</th>
          <th>Chi ti·∫øt</th>
          </tr>
          EOL
          
          get_meta_value() {
            local pattern="$1"
            local file="$2"
            local langs=("vi" "en" "")
            
            for lang in "${langs[@]}"; do
              local suffix=""
              [ -n "$lang" ] && suffix=":$lang"
              local value=$(grep -m 1 "@${pattern}${suffix}" "$file" | sed -E "s/\/\/ @${pattern}${suffix}\s+//")
              [ -n "$value" ] && echo "$value" && return
            done
          }
          
          while IFS= read -r -d '' file; do
            name=$(get_meta_value "name" "$file")
            version=$(grep -m 1 "@version" "$file" | sed -E 's/\/\/ @version\s+//')
            desc=$(get_meta_value "description" "$file")
            author=$(grep -m 1 "@author" "$file" | sed -E 's/\/\/ @author\s+//')
            base=$(basename "$file")
            
            cat >> README.md << EOL
          <tr>
          <td>
          <b>${name}</b><br>
          <small>üì¶ v${version}</small><br>
          <small>üë§ ${author}</small>
          </td>
          <td>
          <p>${desc}</p>
          <p>
          <a href="https://github.com/${{ github.repository }}/raw/main/${{ env.USERJS_DIR }}/${base}">üì• C√†i ƒë·∫∑t</a> |
          <a href="https://github.com/${{ github.repository }}/blob/main/${{ env.USERJS_DIR }}/${base}">üìù M√£ ngu·ªìn</a>
          </p>
          </td>
          </tr>
          EOL
          done < <(find "${{ env.USERJS_DIR }}" -name "*.user.js" -print0 | sort -z)
          
          cat >> README.md << EOL
          </table>
          
          ## üîí B·∫£o m·∫≠t
          
          T·∫•t c·∫£ script ƒë·ªÅu ƒë∆∞·ª£c n√©n (minify) ƒë·ªÉ b·∫£o v·ªá v√† t·ªëi ∆∞u hi·ªáu su·∫•t. X√°c minh t√≠nh to√†n v·∫πn b·∫±ng c√°c checksum b√™n d∆∞·ªõi.
          
          <details>
          <summary>üìù Checksums (SHA-256, MD5, SHA-1)</summary>
          
          \`\`\`
          $(cat "${{ env.USERJS_DIR }}/checksums.txt")
          \`\`\`
          </details>
          
          ---
          <div align="center">
          <i>C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: ${{ env.CURRENT_DATE }}</i>
          </div>
          EOL

      - name: Commit changes
        if: steps.process.outputs.processed_count > 0 || git diff --name-only | grep -q "${{ env.USERJS_DIR }}"
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          git add "${{ env.USERJS_DIR }}/" README.md
          git add -A  # Add all changes including deletions
          
          git commit -m "üì¶ X·ª≠ l√Ω UserScript
          
          Th·ªëng k√™:
          - ƒê√£ x·ª≠ l√Ω: ${{ steps.process.outputs.processed_count }}/${{ steps.init.outputs.initial_count }}
          - C·∫≠p nh·∫≠t: ${{ env.CURRENT_DATE }}
          
          Thay ƒë·ªïi:
          - ‚ú® C·∫≠p nh·∫≠t metadata
          - üîí T·∫°o checksums (SHA-256, MD5, SHA-1)
          - üìù C·∫≠p nh·∫≠t README
          - üóëÔ∏è X√≥a t·ªáp g·ªëc sau khi x·ª≠ l√Ω
          - üßπ X·ª≠ l√Ω c√°c t·ªáp ƒë√£ x√≥a"
          
          git push
