name: JavaScript Producer

on:
  push:
    paths:
      - '**.user.js'
      - '.github/workflows/**'
  pull_request:
    paths:
      - '**.user.js'
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'  # Daily rebuild at midnight

env:
  NODE_VERSION: '20'
  TERSER_OPTIONS: '--mangle --comments false'  # Removed console.log dropping
  USERJS_DIR: 'userjs'
  TZ: 'Asia/Ho_Chi_Minh'

jobs:
  process-js:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          npm install -g terser prettier

      - name: Set current date
        id: date
        run: |
          echo "CURRENT_DATE=$(TZ=${{ env.TZ }} date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV

      - name: Initialize workspace
        id: init
        run: |
          mkdir -p "${{ env.USERJS_DIR }}"
          touch "${{ env.USERJS_DIR }}/.gitkeep"
          echo "# Checksums generated on ${{ env.CURRENT_DATE }}" > "${{ env.USERJS_DIR }}/checksums.txt"
          echo "initial_count=$(find . -name "*.user.js" -not -path "./${{ env.USERJS_DIR }}/*" | wc -l)" >> $GITHUB_OUTPUT

      - name: Process JavaScript files
        id: process
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          # Function to calculate multiple checksums
          calculate_checksums() {
            local file="$1"
            local base="$2"
            local target_dir="$3"
            
            {
              echo "SHA-256: $(sha256sum "$file" | cut -d' ' -f1)"
              echo "MD5: $(md5sum "$file" | cut -d' ' -f1)"
              echo "SHA-1: $(sha1sum "$file" | cut -d' ' -f1)"
              echo "File: ${base}.user.js"
              echo "---"
            } >> "$target_dir/checksums.txt"
          }

          # Function to validate metadata
          validate_metadata() {
            local meta="$1"
            local file="$2"
            local required_fields=("name" "description" "version" "author")
            
            for field in "${required_fields[@]}"; do
              if ! echo "$meta" | grep -q "@$field"; then
                echo "::error::Missing required @$field metadata in $file"
                return 1
              fi
            done
            return 0
          }

          # Function to handle file deletions
          handle_file_deletion() {
            local deleted_file="$1"
            local target_dir="$2"
            
            if [[ "$deleted_file" =~ \.(user|meta)\.js$ ]]; then
              local base="${deleted_file%.*}"
              rm -f "$target_dir/${base}.user.js" "$target_dir/${base}.meta.js"
              echo "✓ Removed files for: $base"
            fi
          }

          # Function to process individual script
          process_script() {
            local file="$1"
            local filename=$(basename "$file")
            local base="${filename%.user.js}"
            local target_dir="${{ env.USERJS_DIR }}"

            echo "Processing $filename..."

            # Extract metadata block
            meta_block=$(awk '/\/\/ ==UserScript==/{p=1;print;next}/\/\/ ==\/UserScript==/{p=0;print;exit}p{print}' "$file")

            # Validate metadata
            if ! validate_metadata "$meta_block" "$filename"; then
              return 1
            fi

            # Update metadata URLs
            meta_block=$(echo "$meta_block" | sed -E "
              s|^// @downloadURL .*|// @downloadURL https://github.com/$GITHUB_REPOSITORY/raw/main/$target_dir/${base}.user.js|
              s|^// @updateURL .*|// @updateURL https://github.com/$GITHUB_REPOSITORY/raw/main/$target_dir/${base}.meta.js|
              s|^// @supportURL .*|// @supportURL https://github.com/$GITHUB_REPOSITORY/issues|
              s|^// @homepageURL .*|// @homepageURL https://github.com/$GITHUB_REPOSITORY|
            ")

            # Format metadata block
            meta_block=$(echo "$meta_block" | prettier --parser=babel)

            # Process and minify code
            {
              echo "$meta_block"
              awk '/\/\/ ==\/UserScript==/{p=1;next}p{print}' "$file" | terser ${{ env.TERSER_OPTIONS }}
            } > "$target_dir/${base}.user.js"

            # Save metadata
            echo "$meta_block" > "$target_dir/${base}.meta.js"

            # Calculate checksums
            calculate_checksums "$target_dir/${base}.user.js" "$base" "$target_dir"

            echo "✓ Processed: $filename"
            return 0
          }

          export -f process_script
          export -f calculate_checksums
          export -f validate_metadata
          export -f handle_file_deletion

          # Process new/modified scripts
          find . -name "*.user.js" -not -path "./${{ env.USERJS_DIR }}/*" -print0 |
          while IFS= read -r -d '' file; do
            if ! process_script "$file"; then
              exit 1
            fi
          done

          # Handle deleted files
          deleted_files=$(git diff --name-only --diff-filter=D HEAD^ HEAD)
          if [ -n "$deleted_files" ]; then
            echo "Processing deleted files..."
            while IFS= read -r file; do
              if [[ "$file" =~ ^${{ env.USERJS_DIR }}/ ]]; then
                handle_file_deletion "$(basename "$file")" "${{ env.USERJS_DIR }}"
              fi
            done <<< "$deleted_files"
          fi

          echo "processed_count=$(find "${{ env.USERJS_DIR }}" -name "*.user.js" | wc -l)" >> $GITHUB_OUTPUT

      - name: Update README
        if: steps.process.outputs.processed_count > 0
        run: |
          # Function to get metadata value with language fallback
          get_meta_value() {
            local pattern="$1"
            local file="$2"
            local langs=("vi" "en" "")
            
            for lang in "${langs[@]}"; do
              local suffix=""
              [ -n "$lang" ] && suffix=":$lang"
              local value=$(grep -m 1 "@${pattern}${suffix}" "$file" | sed -E "s/\/\/ @${pattern}${suffix}\s+//")
              [ -n "$value" ] && echo "$value" && return
            done
          }

          # Create README content
          cat > README.md << EOL
          <div align="center">
          
          # 📦 Bộ Sưu Tập UserScript
          
          ![Scripts](https://img.shields.io/badge/scripts-${{ steps.process.outputs.processed_count }}-blue?style=flat-square)
          ![Cập nhật](https://img.shields.io/github/last-commit/${{ github.repository }}/main?style=flat-square&label=Cập%20nhật)
          ![Trạng thái](https://img.shields.io/github/actions/workflow/status/${{ github.repository }}/js-producer.yml?style=flat-square&label=Trạng%20thái)
          [![Xem issues](https://img.shields.io/github/issues/${{ github.repository }}?style=flat-square&label=Issues)](https://github.com/${{ github.repository }}/issues)
          
          *Bộ sưu tập UserScript được tối ưu hóa và cập nhật tự động*
          
          </div>

          ## 📜 Danh Sách Script

          <table>
          <tr>
          <th>Script</th>
          <th>Chi tiết</th>
          </tr>
          EOL

          # Generate script entries
          while IFS= read -r -d '' file; do
            name=$(get_meta_value "name" "$file")
            version=$(grep -m 1 "@version" "$file" | sed -E 's/\/\/ @version\s+//')
            desc=$(get_meta_value "description" "$file")
            author=$(grep -m 1 "@author" "$file" | sed -E 's/\/\/ @author\s+//')
            base=$(basename "$file")
            
            cat >> README.md << EOL
          <tr>
          <td>
          <b>${name}</b><br>
          <small>📦 v${version}</small><br>
          <small>👤 ${author}</small>
          </td>
          <td>
          <p>${desc}</p>
          <p>
          <a href="https://github.com/${{ github.repository }}/raw/main/${{ env.USERJS_DIR }}/${base}">📥 Cài đặt</a> |
          <a href="https://github.com/${{ github.repository }}/blob/main/${{ env.USERJS_DIR }}/${base}">📝 Mã nguồn</a>
          </p>
          </td>
          </tr>
          EOL
          done < <(find "${{ env.USERJS_DIR }}" -name "*.user.js" -print0 | sort -z)

          # Add footer sections
          cat >> README.md << EOL
          </table>

          ## 🔒 Tính năng

          - ✨ Tự động cập nhật metadata và URL
          - 📦 Tối ưu và nén mã nguồn
          - 🔄 Tính toán và lưu trữ checksums
          - 🚀 Cập nhật hàng ngày

          <details>
          <summary>📝 Checksums (SHA-256, MD5, SHA-1)</summary>

          \`\`\`
          $(cat "${{ env.USERJS_DIR }}/checksums.txt")
          \`\`\`
          </details>

          ## 📄 Giấy phép

          Phân phối dưới giấy phép GPL 3.0. Xem \`LICENSE\` để biết thêm thông tin.

          ---
          <div align="center">
          <i>Cập nhật lần cuối: ${{ env.CURRENT_DATE }}</i>
          </div>
          EOL

      - name: Commit changes
        if: steps.process.outputs.processed_count > 0 || github.event_name == 'schedule'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          git add "${{ env.USERJS_DIR }}/" README.md
          git add -A  # Add all changes including deletions
          
          git commit -m "📦 Cập nhật UserScript

          Thống kê:
          - Đã xử lý: ${{ steps.process.outputs.processed_count }}/${{ steps.init.outputs.initial_count }}
          - Cập nhật: ${{ env.CURRENT_DATE }}

          Thay đổi:
          - ✨ Cập nhật metadata
          - 📝 Tạo checksums
          - 📖 Cập nhật README"
          
          git push
